/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ALdfDvglobalsProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ALdfProgramme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AOptdvOptdv */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ALdvLdv */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADvLdv */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ASuiteLdvLdvsuite */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ASuiteDvLdvsuite */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AVarDv */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ATableauDv */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ALdfLdf */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ALdfVideLdf */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ADfDf */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ADfSansvariablesDf */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ASansLparam */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AAvecLparam */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AInstaffectInst */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AInstblocInst */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AInstsiInst */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AInsttantqueInst */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AInstappelInst */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AInstretourInst */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AInstecritureInst */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AInstincrInst */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AInstvideInst */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AInstaffect */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AInstbloc */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce ALinstLinst */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce ALinstvideLinst */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce ASinonInstsi */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce ASiInstsi */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AInstsinon */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce AInsttantque */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AInstappel */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AInstretour */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list, false);
            }
            break;
            case 34: /* reduce AInstecriture */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list, false);
            }
            break;
            case 35: /* reduce AInstvide */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list, false);
            }
            break;
            case 36: /* reduce AInstincr */
            {
                ArrayList<Object> list = new36();
                push(goTo(19), list, false);
            }
            break;
            case 37: /* reduce AOuExp */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce AT1Exp */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
            case 39: /* reduce AEtT1 */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, false);
            }
            break;
            case 40: /* reduce AT2T1 */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list, false);
            }
            break;
            case 41: /* reduce AInfT2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list, false);
            }
            break;
            case 42: /* reduce AEgaleT2 */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce AT3T2 */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce APlusT3 */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce AMinusT3 */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AT4T3 */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce AMultT4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce ADiviseT4 */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce AT5T4 */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce ANonT5 */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce ATerT5 */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AT7T5 */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list, false);
            }
            break;
            case 53: /* reduce AT6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce ANombreT7 */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list, false);
            }
            break;
            case 55: /* reduce AAppelfT7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list, false);
            }
            break;
            case 56: /* reduce AVarT7 */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list, false);
            }
            break;
            case 57: /* reduce AParT7 */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list, false);
            }
            break;
            case 58: /* reduce ALireT7 */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list, false);
            }
            break;
            case 59: /* reduce ATabVar */
            {
                ArrayList<Object> list = new59();
                push(goTo(28), list, false);
            }
            break;
            case 60: /* reduce AVarVar */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list, false);
            }
            break;
            case 61: /* reduce ALexpLexp */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list, false);
            }
            break;
            case 62: /* reduce AVideLexp */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list, false);
            }
            break;
            case 63: /* reduce ALsuiteLexpSuite */
            {
                ArrayList<Object> list = new63();
                push(goTo(30), list, false);
            }
            break;
            case 64: /* reduce AVideLexpSuite */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list, false);
            }
            break;
            case 65: /* reduce AAppelf */
            {
                ArrayList<Object> list = new65();
                push(goTo(31), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ALdfDvglobalsProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        POptdv poptdvNode2;
        PLdf pldfNode3;
        poptdvNode2 = (POptdv)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pprogrammeNode1 = new ALdfDvglobalsProgramme(poptdvNode2, pldfNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ALdfProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdf pldfNode2;
        pldfNode2 = (PLdf)nodeArrayList1.get(0);

        pprogrammeNode1 = new ALdfProgramme(pldfNode2);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOptdvOptdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POptdv poptdvNode1;
        {
            // Block
        PLdv pldvNode2;
        TPointVirgule tpointvirguleNode3;
        pldvNode2 = (PLdv)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);

        poptdvNode1 = new AOptdvOptdv(pldvNode2, tpointvirguleNode3);
        }
	nodeList.add(poptdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ALdvLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        PLdvsuite pldvsuiteNode3;
        pdvNode2 = (PDv)nodeArrayList1.get(0);
        pldvsuiteNode3 = (PLdvsuite)nodeArrayList2.get(0);

        pldvNode1 = new ALdvLdv(pdvNode2, pldvsuiteNode3);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADvLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        pdvNode2 = (PDv)nodeArrayList1.get(0);

        pldvNode1 = new ADvLdv(pdvNode2);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASuiteLdvLdvsuite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvsuite pldvsuiteNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDv pdvNode3;
        PLdvsuite pldvsuiteNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);
        pldvsuiteNode4 = (PLdvsuite)nodeArrayList3.get(0);

        pldvsuiteNode1 = new ASuiteLdvLdvsuite(tvirguleNode2, pdvNode3, pldvsuiteNode4);
        }
	nodeList.add(pldvsuiteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASuiteDvLdvsuite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvsuite pldvsuiteNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDv pdvNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);

        pldvsuiteNode1 = new ASuiteDvLdvsuite(tvirguleNode2, pdvNode3);
        }
	nodeList.add(pldvsuiteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVarDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdvNode1 = new AVarDv(ttypeNode2, tidentifNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATableauDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        TCrochetOuvrant tcrochetouvrantNode4;
        TNombre tnombreNode5;
        TCrochetFermant tcrochetfermantNode6;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcrochetouvrantNode4 = (TCrochetOuvrant)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochetfermantNode6 = (TCrochetFermant)nodeArrayList5.get(0);

        pdvNode1 = new ATableauDv(ttypeNode2, tidentifNode3, tcrochetouvrantNode4, tnombreNode5, tcrochetfermantNode6);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ALdfLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new ALdfLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALdfVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new ALdfVideLdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADfDf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PLparam plparamNode3;
        POptdv poptdvNode4;
        PInstbloc pinstblocNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        plparamNode3 = (PLparam)nodeArrayList2.get(0);
        poptdvNode4 = (POptdv)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstbloc)nodeArrayList4.get(0);

        pdfNode1 = new ADfDf(tidentifNode2, plparamNode3, poptdvNode4, pinstblocNode5);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADfSansvariablesDf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PLparam plparamNode3;
        PInstbloc pinstblocNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        plparamNode3 = (PLparam)nodeArrayList2.get(0);
        pinstblocNode4 = (PInstbloc)nodeArrayList3.get(0);

        pdfNode1 = new ADfSansvariablesDf(tidentifNode2, plparamNode3, pinstblocNode4);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASansLparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLparam plparamNode1;
        {
            // Block
        TParentheseOuvrante tparentheseouvranteNode2;
        TParentheseFermante tparenthesefermanteNode3;
        tparentheseouvranteNode2 = (TParentheseOuvrante)nodeArrayList1.get(0);
        tparenthesefermanteNode3 = (TParentheseFermante)nodeArrayList2.get(0);

        plparamNode1 = new ASansLparam(tparentheseouvranteNode2, tparenthesefermanteNode3);
        }
	nodeList.add(plparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAvecLparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLparam plparamNode1;
        {
            // Block
        TParentheseOuvrante tparentheseouvranteNode2;
        PLdv pldvNode3;
        TParentheseFermante tparenthesefermanteNode4;
        tparentheseouvranteNode2 = (TParentheseOuvrante)nodeArrayList1.get(0);
        pldvNode3 = (PLdv)nodeArrayList2.get(0);
        tparenthesefermanteNode4 = (TParentheseFermante)nodeArrayList3.get(0);

        plparamNode1 = new AAvecLparam(tparentheseouvranteNode2, pldvNode3, tparenthesefermanteNode4);
        }
	nodeList.add(plparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AInstaffectInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstaffect pinstaffectNode2;
        pinstaffectNode2 = (PInstaffect)nodeArrayList1.get(0);

        pinstNode1 = new AInstaffectInst(pinstaffectNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AInstblocInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstbloc pinstblocNode2;
        pinstblocNode2 = (PInstbloc)nodeArrayList1.get(0);

        pinstNode1 = new AInstblocInst(pinstblocNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AInstsiInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstsi pinstsiNode2;
        pinstsiNode2 = (PInstsi)nodeArrayList1.get(0);

        pinstNode1 = new AInstsiInst(pinstsiNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInsttantqueInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInsttantque pinsttantqueNode2;
        pinsttantqueNode2 = (PInsttantque)nodeArrayList1.get(0);

        pinstNode1 = new AInsttantqueInst(pinsttantqueNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AInstappelInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstappel pinstappelNode2;
        pinstappelNode2 = (PInstappel)nodeArrayList1.get(0);

        pinstNode1 = new AInstappelInst(pinstappelNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AInstretourInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstretour pinstretourNode2;
        pinstretourNode2 = (PInstretour)nodeArrayList1.get(0);

        pinstNode1 = new AInstretourInst(pinstretourNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInstecritureInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstecriture pinstecritureNode2;
        pinstecritureNode2 = (PInstecriture)nodeArrayList1.get(0);

        pinstNode1 = new AInstecritureInst(pinstecritureNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInstincrInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstincr pinstincrNode2;
        pinstincrNode2 = (PInstincr)nodeArrayList1.get(0);

        pinstNode1 = new AInstincrInst(pinstincrNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AInstvideInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PInstvide pinstvideNode2;
        pinstvideNode2 = (PInstvide)nodeArrayList1.get(0);

        pinstNode1 = new AInstvideInst(pinstvideNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AInstaffect */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstaffect pinstaffectNode1;
        {
            // Block
        PVar pvarNode2;
        TEgale tegaleNode3;
        PExp pexpNode4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegaleNode3 = (TEgale)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        pinstaffectNode1 = new AInstaffect(pvarNode2, tegaleNode3, pexpNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstaffectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInstbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstbloc pinstblocNode1;
        {
            // Block
        TAccoladeOuvrante taccoladeouvranteNode2;
        PLinst plinstNode3;
        TAccoladeFermante taccoladefermanteNode4;
        taccoladeouvranteNode2 = (TAccoladeOuvrante)nodeArrayList1.get(0);
        plinstNode3 = (PLinst)nodeArrayList2.get(0);
        taccoladefermanteNode4 = (TAccoladeFermante)nodeArrayList3.get(0);

        pinstblocNode1 = new AInstbloc(taccoladeouvranteNode2, plinstNode3, taccoladefermanteNode4);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ALinstLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinst plinstNode1;
        {
            // Block
        PInst pinstNode2;
        PLinst plinstNode3;
        pinstNode2 = (PInst)nodeArrayList1.get(0);
        plinstNode3 = (PLinst)nodeArrayList2.get(0);

        plinstNode1 = new ALinstLinst(pinstNode2, plinstNode3);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ALinstvideLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLinst plinstNode1;
        {
            // Block

        plinstNode1 = new ALinstvideLinst();
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASinonInstsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstsi pinstsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PInstbloc pinstblocNode5;
        PInstsinon pinstsinonNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstbloc)nodeArrayList4.get(0);
        pinstsinonNode6 = (PInstsinon)nodeArrayList5.get(0);

        pinstsiNode1 = new ASinonInstsi(tsiNode2, pexpNode3, talorsNode4, pinstblocNode5, pinstsinonNode6);
        }
	nodeList.add(pinstsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASiInstsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstsi pinstsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PInstbloc pinstblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstbloc)nodeArrayList4.get(0);

        pinstsiNode1 = new ASiInstsi(tsiNode2, pexpNode3, talorsNode4, pinstblocNode5);
        }
	nodeList.add(pinstsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AInstsinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstsinon pinstsinonNode1;
        {
            // Block
        TSinon tsinonNode2;
        PInstbloc pinstblocNode3;
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        pinstblocNode3 = (PInstbloc)nodeArrayList2.get(0);

        pinstsinonNode1 = new AInstsinon(tsinonNode2, pinstblocNode3);
        }
	nodeList.add(pinstsinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AInsttantque */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInsttantque pinsttantqueNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExp pexpNode3;
        TFaire tfaireNode4;
        PInstbloc pinstblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstbloc)nodeArrayList4.get(0);

        pinsttantqueNode1 = new AInsttantque(ttantqueNode2, pexpNode3, tfaireNode4, pinstblocNode5);
        }
	nodeList.add(pinsttantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInstappel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstappel pinstappelNode1;
        {
            // Block
        PAppelf pappelfNode2;
        TPointVirgule tpointvirguleNode3;
        pappelfNode2 = (PAppelf)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);

        pinstappelNode1 = new AInstappel(pappelfNode2, tpointvirguleNode3);
        }
	nodeList.add(pinstappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AInstretour */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstretour pinstretourNode1;
        {
            // Block
        TRetour tretourNode2;
        PExp pexpNode3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        pinstretourNode1 = new AInstretour(tretourNode2, pexpNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstretourNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AInstecriture */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstecriture pinstecritureNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParentheseOuvrante tparentheseouvranteNode3;
        PExp pexpNode4;
        TParentheseFermante tparenthesefermanteNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparentheseouvranteNode3 = (TParentheseOuvrante)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tparenthesefermanteNode5 = (TParentheseFermante)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstecritureNode1 = new AInstecriture(tecrireNode2, tparentheseouvranteNode3, pexpNode4, tparenthesefermanteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstecritureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AInstvide */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstvide pinstvideNode1;
        {
            // Block
        TPointVirgule tpointvirguleNode2;
        tpointvirguleNode2 = (TPointVirgule)nodeArrayList1.get(0);

        pinstvideNode1 = new AInstvide(tpointvirguleNode2);
        }
	nodeList.add(pinstvideNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AInstincr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstincr pinstincrNode1;
        {
            // Block
        PVar pvarNode2;
        TPlus tplusNode3;
        TEgale tegaleNode4;
        PExp pexpNode5;
        TPointVirgule tpointvirguleNode6;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        tegaleNode4 = (TEgale)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstincrNode1 = new AInstincr(pvarNode2, tplusNode3, tegaleNode4, pexpNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstincrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PT1 pt1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pt1Node4 = (PT1)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, touNode3, pt1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AT1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PT1 pt1Node2;
        pt1Node2 = (PT1)nodeArrayList1.get(0);

        pexpNode1 = new AT1Exp(pt1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEtT1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT1 pt1Node1;
        {
            // Block
        PT1 pt1Node2;
        TEt tetNode3;
        PT2 pt2Node4;
        pt1Node2 = (PT1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pt2Node4 = (PT2)nodeArrayList3.get(0);

        pt1Node1 = new AEtT1(pt1Node2, tetNode3, pt2Node4);
        }
	nodeList.add(pt1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AT2T1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT1 pt1Node1;
        {
            // Block
        PT2 pt2Node2;
        pt2Node2 = (PT2)nodeArrayList1.get(0);

        pt1Node1 = new AT2T1(pt2Node2);
        }
	nodeList.add(pt1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AInfT2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT2 pt2Node1;
        {
            // Block
        PT2 pt2Node2;
        TInferieur tinferieurNode3;
        PT3 pt3Node4;
        pt2Node2 = (PT2)nodeArrayList1.get(0);
        tinferieurNode3 = (TInferieur)nodeArrayList2.get(0);
        pt3Node4 = (PT3)nodeArrayList3.get(0);

        pt2Node1 = new AInfT2(pt2Node2, tinferieurNode3, pt3Node4);
        }
	nodeList.add(pt2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEgaleT2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT2 pt2Node1;
        {
            // Block
        PT2 pt2Node2;
        TEgale tegaleNode3;
        PT3 pt3Node4;
        pt2Node2 = (PT2)nodeArrayList1.get(0);
        tegaleNode3 = (TEgale)nodeArrayList2.get(0);
        pt3Node4 = (PT3)nodeArrayList3.get(0);

        pt2Node1 = new AEgaleT2(pt2Node2, tegaleNode3, pt3Node4);
        }
	nodeList.add(pt2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AT3T2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT2 pt2Node1;
        {
            // Block
        PT3 pt3Node2;
        pt3Node2 = (PT3)nodeArrayList1.get(0);

        pt2Node1 = new AT3T2(pt3Node2);
        }
	nodeList.add(pt2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce APlusT3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT3 pt3Node1;
        {
            // Block
        PT3 pt3Node2;
        TPlus tplusNode3;
        PT4 pt4Node4;
        pt3Node2 = (PT3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pt4Node4 = (PT4)nodeArrayList3.get(0);

        pt3Node1 = new APlusT3(pt3Node2, tplusNode3, pt4Node4);
        }
	nodeList.add(pt3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMinusT3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT3 pt3Node1;
        {
            // Block
        PT3 pt3Node2;
        TMinus tminusNode3;
        PT4 pt4Node4;
        pt3Node2 = (PT3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pt4Node4 = (PT4)nodeArrayList3.get(0);

        pt3Node1 = new AMinusT3(pt3Node2, tminusNode3, pt4Node4);
        }
	nodeList.add(pt3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AT4T3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT3 pt3Node1;
        {
            // Block
        PT4 pt4Node2;
        pt4Node2 = (PT4)nodeArrayList1.get(0);

        pt3Node1 = new AT4T3(pt4Node2);
        }
	nodeList.add(pt3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultT4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT4 pt4Node1;
        {
            // Block
        PT4 pt4Node2;
        TMult tmultNode3;
        PT5 pt5Node4;
        pt4Node2 = (PT4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pt5Node4 = (PT5)nodeArrayList3.get(0);

        pt4Node1 = new AMultT4(pt4Node2, tmultNode3, pt5Node4);
        }
	nodeList.add(pt4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADiviseT4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT4 pt4Node1;
        {
            // Block
        PT4 pt4Node2;
        TDivise tdiviseNode3;
        PT5 pt5Node4;
        pt4Node2 = (PT4)nodeArrayList1.get(0);
        tdiviseNode3 = (TDivise)nodeArrayList2.get(0);
        pt5Node4 = (PT5)nodeArrayList3.get(0);

        pt4Node1 = new ADiviseT4(pt4Node2, tdiviseNode3, pt5Node4);
        }
	nodeList.add(pt4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AT5T4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT4 pt4Node1;
        {
            // Block
        PT5 pt5Node2;
        pt5Node2 = (PT5)nodeArrayList1.get(0);

        pt4Node1 = new AT5T4(pt5Node2);
        }
	nodeList.add(pt4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANonT5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT5 pt5Node1;
        {
            // Block
        TNon tnonNode2;
        PT5 pt5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pt5Node3 = (PT5)nodeArrayList2.get(0);

        pt5Node1 = new ANonT5(tnonNode2, pt5Node3);
        }
	nodeList.add(pt5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATerT5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT5 pt5Node1;
        {
            // Block
        TCrochetOuvrant tcrochetouvrantNode2;
        PT5 pt5Node3;
        TCrochetFermant tcrochetfermantNode4;
        TPointIntero tpointinteroNode5;
        PT6 pt6Node6;
        TPoints tpointsNode7;
        PT7 pt7Node8;
        tcrochetouvrantNode2 = (TCrochetOuvrant)nodeArrayList1.get(0);
        pt5Node3 = (PT5)nodeArrayList2.get(0);
        tcrochetfermantNode4 = (TCrochetFermant)nodeArrayList3.get(0);
        tpointinteroNode5 = (TPointIntero)nodeArrayList4.get(0);
        pt6Node6 = (PT6)nodeArrayList5.get(0);
        tpointsNode7 = (TPoints)nodeArrayList6.get(0);
        pt7Node8 = (PT7)nodeArrayList7.get(0);

        pt5Node1 = new ATerT5(tcrochetouvrantNode2, pt5Node3, tcrochetfermantNode4, tpointinteroNode5, pt6Node6, tpointsNode7, pt7Node8);
        }
	nodeList.add(pt5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AT7T5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT5 pt5Node1;
        {
            // Block
        PT7 pt7Node2;
        pt7Node2 = (PT7)nodeArrayList1.get(0);

        pt5Node1 = new AT7T5(pt7Node2);
        }
	nodeList.add(pt5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AT6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT6 pt6Node1;
        {
            // Block
        PT7 pt7Node2;
        pt7Node2 = (PT7)nodeArrayList1.get(0);

        pt6Node1 = new AT6(pt7Node2);
        }
	nodeList.add(pt6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANombreT7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT7 pt7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pt7Node1 = new ANombreT7(tnombreNode2);
        }
	nodeList.add(pt7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAppelfT7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT7 pt7Node1;
        {
            // Block
        PAppelf pappelfNode2;
        pappelfNode2 = (PAppelf)nodeArrayList1.get(0);

        pt7Node1 = new AAppelfT7(pappelfNode2);
        }
	nodeList.add(pt7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AVarT7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT7 pt7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pt7Node1 = new AVarT7(pvarNode2);
        }
	nodeList.add(pt7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AParT7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT7 pt7Node1;
        {
            // Block
        TParentheseOuvrante tparentheseouvranteNode2;
        PExp pexpNode3;
        TParentheseFermante tparenthesefermanteNode4;
        tparentheseouvranteNode2 = (TParentheseOuvrante)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tparenthesefermanteNode4 = (TParentheseFermante)nodeArrayList3.get(0);

        pt7Node1 = new AParT7(tparentheseouvranteNode2, pexpNode3, tparenthesefermanteNode4);
        }
	nodeList.add(pt7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALireT7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PT7 pt7Node1;
        {
            // Block
        TLire tlireNode2;
        TParentheseOuvrante tparentheseouvranteNode3;
        TParentheseFermante tparenthesefermanteNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparentheseouvranteNode3 = (TParentheseOuvrante)nodeArrayList2.get(0);
        tparenthesefermanteNode4 = (TParentheseFermante)nodeArrayList3.get(0);

        pt7Node1 = new ALireT7(tlireNode2, tparentheseouvranteNode3, tparenthesefermanteNode4);
        }
	nodeList.add(pt7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATabVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCrochetOuvrant tcrochetouvrantNode3;
        PExp pexpNode4;
        TCrochetFermant tcrochetfermantNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcrochetouvrantNode3 = (TCrochetOuvrant)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcrochetfermantNode5 = (TCrochetFermant)nodeArrayList4.get(0);

        pvarNode1 = new ATabVar(tidentifNode2, tcrochetouvrantNode3, pexpNode4, tcrochetfermantNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AVarVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ALexpLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        PExp pexpNode2;
        PLexpSuite plexpsuiteNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plexpsuiteNode3 = (PLexpSuite)nodeArrayList2.get(0);

        plexpNode1 = new ALexpLexp(pexpNode2, plexpsuiteNode3);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AVideLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLexp plexpNode1;
        {
            // Block

        plexpNode1 = new AVideLexp();
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ALsuiteLexpSuite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexpSuite plexpsuiteNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExp pexpNode3;
        PLexpSuite plexpsuiteNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plexpsuiteNode4 = (PLexpSuite)nodeArrayList3.get(0);

        plexpsuiteNode1 = new ALsuiteLexpSuite(tvirguleNode2, pexpNode3, plexpsuiteNode4);
        }
	nodeList.add(plexpsuiteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AVideLexpSuite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLexpSuite plexpsuiteNode1;
        {
            // Block

        plexpsuiteNode1 = new AVideLexpSuite();
        }
	nodeList.add(plexpsuiteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAppelf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelf pappelfNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TParentheseOuvrante tparentheseouvranteNode3;
        PLexp plexpNode4;
        TParentheseFermante tparenthesefermanteNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparentheseouvranteNode3 = (TParentheseOuvrante)nodeArrayList2.get(0);
        plexpNode4 = (PLexp)nodeArrayList3.get(0);
        tparenthesefermanteNode5 = (TParentheseFermante)nodeArrayList4.get(0);

        pappelfNode1 = new AAppelf(tidentifNode2, tparentheseouvranteNode3, plexpNode4, tparenthesefermanteNode5);
        }
	nodeList.add(pappelfNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 10}, {22, SHIFT, 1}, {27, SHIFT, 2}, },
			{{-1, ERROR, 1}, {27, SHIFT, 9}, },
			{{-1, ERROR, 2}, {5, SHIFT, 10}, },
			{{-1, ERROR, 3}, {30, ACCEPT, -1}, },
			{{-1, REDUCE, 10}, {27, SHIFT, 2}, },
			{{-1, ERROR, 5}, {2, SHIFT, 13}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 14}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 10}, {27, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {7, SHIFT, 17}, },
			{{-1, ERROR, 10}, {6, SHIFT, 18}, {22, SHIFT, 1}, },
			{{-1, ERROR, 11}, {9, SHIFT, 20}, {22, SHIFT, 1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 14}, {22, SHIFT, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 17}, {26, SHIFT, 24}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 19}, {6, SHIFT, 25}, },
			{{-1, REDUCE, 27}, {2, SHIFT, 26}, {9, SHIFT, 20}, {17, SHIFT, 27}, {20, SHIFT, 28}, {23, SHIFT, 29}, {25, SHIFT, 30}, {27, SHIFT, 31}, },
			{{-1, ERROR, 21}, {9, SHIFT, 20}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 14}, },
			{{-1, ERROR, 24}, {8, SHIFT, 47}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 27}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 28}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 29}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 30}, {5, SHIFT, 64}, },
			{{-1, REDUCE, 60}, {5, SHIFT, 65}, {7, SHIFT, 66}, },
			{{-1, REDUCE, 27}, {2, SHIFT, 26}, {9, SHIFT, 20}, {17, SHIFT, 27}, {20, SHIFT, 28}, {23, SHIFT, 29}, {25, SHIFT, 30}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 35}, {10, SHIFT, 68}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 43}, {11, SHIFT, 69}, {16, SHIFT, 70}, },
			{{-1, ERROR, 44}, {2, SHIFT, 71}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 48}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 49}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 50}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 51}, {5, SHIFT, 75}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 53}, {14, SHIFT, 76}, {18, SHIFT, 77}, },
			{{-1, REDUCE, 38}, {13, SHIFT, 78}, },
			{{-1, REDUCE, 40}, {11, SHIFT, 79}, {12, SHIFT, 80}, },
			{{-1, REDUCE, 43}, {4, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 46}, {1, SHIFT, 83}, {3, SHIFT, 84}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 62}, {14, SHIFT, 76}, {21, SHIFT, 85}, },
			{{-1, ERROR, 63}, {2, SHIFT, 86}, {14, SHIFT, 76}, },
			{{-1, ERROR, 64}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 62}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 66}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 69}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 70}, {11, SHIFT, 92}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 72}, {6, SHIFT, 93}, {14, SHIFT, 76}, },
			{{-1, ERROR, 73}, {8, SHIFT, 94}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 75}, {6, SHIFT, 95}, },
			{{-1, ERROR, 76}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 77}, {9, SHIFT, 20}, },
			{{-1, ERROR, 78}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 79}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 80}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 81}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 82}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 83}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 84}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 85}, {9, SHIFT, 20}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 87}, {6, SHIFT, 106}, {14, SHIFT, 76}, },
			{{-1, REDUCE, 64}, {0, SHIFT, 107}, {14, SHIFT, 76}, },
			{{-1, ERROR, 89}, {6, SHIFT, 109}, },
			{{-1, ERROR, 90}, {8, SHIFT, 110}, {14, SHIFT, 76}, },
			{{-1, ERROR, 91}, {2, SHIFT, 111}, {14, SHIFT, 76}, },
			{{-1, ERROR, 92}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 94}, {28, SHIFT, 113}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 37}, {13, SHIFT, 78}, },
			{{-1, REDUCE, 29}, {19, SHIFT, 114}, },
			{{-1, REDUCE, 39}, {11, SHIFT, 79}, {12, SHIFT, 80}, },
			{{-1, REDUCE, 42}, {4, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 41}, {4, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 45}, {1, SHIFT, 83}, {3, SHIFT, 84}, },
			{{-1, REDUCE, 44}, {1, SHIFT, 83}, {3, SHIFT, 84}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 106}, {2, SHIFT, 116}, },
			{{-1, ERROR, 107}, {5, SHIFT, 48}, {7, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 112}, {2, SHIFT, 118}, {14, SHIFT, 76}, },
			{{-1, ERROR, 113}, {5, SHIFT, 48}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, ERROR, 114}, {9, SHIFT, 20}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 64}, {0, SHIFT, 107}, {14, SHIFT, 76}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 119}, {29, SHIFT, 123}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 123}, {5, SHIFT, 48}, {24, SHIFT, 51}, {26, SHIFT, 52}, {27, SHIFT, 31}, },
			{{-1, REDUCE, 51}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {11, 21}, },
			{{-1, 5}, {10, 19}, },
			{{-1, 15}, {23, 46}, },
			{{-1, 6}, {14, 23}, },
			{{-1, 7}, {4, 12}, {8, 16}, },
			{{-1, 8}, },
			{{-1, 11}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 34}, {11, 22}, {21, 45}, {77, 97}, {85, 105}, {114, 121}, },
			{{-1, 35}, {32, 67}, },
			{{-1, 36}, },
			{{-1, 115}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 53}, {28, 62}, {29, 63}, {48, 72}, {64, 87}, {65, 88}, {66, 90}, {69, 91}, {92, 112}, {107, 117}, },
			{{-1, 54}, {76, 96}, },
			{{-1, 55}, {78, 98}, },
			{{-1, 56}, {79, 99}, {80, 100}, },
			{{-1, 57}, {81, 101}, {82, 102}, },
			{{-1, 58}, {49, 73}, {50, 74}, {83, 103}, {84, 104}, },
			{{-1, 119}, },
			{{-1, 59}, {113, 120}, {123, 124}, },
			{{-1, 60}, {20, 43}, {32, 43}, },
			{{-1, 89}, },
			{{-1, 108}, {117, 122}, },
			{{-1, 61}, {20, 44}, {32, 44}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', identif, EOF",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: identif, EOF",
			"expecting: ';'",
			"expecting: ',', ';', ')'",
			"expecting: ',', ';', ')', '['",
			"expecting: ')', 'entier'",
			"expecting: '{', 'entier'",
			"expecting: '{', identif, EOF",
			"expecting: 'entier'",
			"expecting: ';', ')'",
			"expecting: nombre",
			"expecting: ')'",
			"expecting: ';', '{', '}', 'si', 'tantque', 'retour', 'ecrire', identif",
			"expecting: '{'",
			"expecting: ']'",
			"expecting: '(', '[', '!', 'lire', nombre, identif",
			"expecting: ',', '/', ';', '*', '-', '(', ')', '[', ']', '=', '<', '&', '|', '+', 'alors', 'faire', ':'",
			"expecting: '}'",
			"expecting: '=', '+'",
			"expecting: ',', '/', ';', '*', '-', ')', ']', '=', '<', '&', '|', '+', 'alors', 'faire', ':'",
			"expecting: '|', 'alors'",
			"expecting: ',', ';', ')', ']', '&', '|', 'alors', 'faire'",
			"expecting: ',', ';', ')', ']', '=', '<', '&', '|', 'alors', 'faire'",
			"expecting: ',', ';', '-', ')', ']', '=', '<', '&', '|', '+', 'alors', 'faire'",
			"expecting: ',', '/', ';', '*', '-', ')', ']', '=', '<', '&', '|', '+', 'alors', 'faire'",
			"expecting: '|', 'faire'",
			"expecting: ';', '|'",
			"expecting: '(', ')', '[', '!', 'lire', nombre, identif",
			"expecting: ';', '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identif, EOF",
			"expecting: '='",
			"expecting: ')', '|'",
			"expecting: ',', ')', '|'",
			"expecting: ']', '|'",
			"expecting: '?'",
			"expecting: ';', '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identif",
			"expecting: '(', 'lire', nombre, identif",
			"expecting: ':'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 3, 4, 7, 8, 9, 3, 10, 11, 12, 3, 13, 9, 14, 15, 16, 4, 6, 17, 9, 15, 18, 18, 18, 2, 19, 15, 15, 15, 20, 15, 15, 15, 15, 15, 15, 15, 21, 5, 4, 12, 6, 18, 18, 18, 2, 22, 23, 24, 25, 26, 27, 27, 27, 22, 22, 28, 29, 18, 30, 18, 20, 31, 18, 32, 15, 33, 17, 27, 14, 18, 16, 18, 18, 18, 18, 18, 18, 18, 16, 15, 33, 34, 14, 35, 29, 18, 22, 36, 22, 24, 37, 25, 26, 26, 27, 27, 27, 27, 15, 5, 18, 14, 22, 22, 15, 29, 38, 16, 15, 15, 34, 15, 39, 39, 15, 14, 38, 27, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

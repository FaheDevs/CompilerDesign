/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ATerT5 extends PT5
{
    private TCrochetOuvrant _crochetOuvrant_;
    private PT5 _t5_;
    private TCrochetFermant _crochetFermant_;
    private TPointIntero _pointIntero_;
    private PT6 _t6_;
    private TPoints _points_;
    private PT7 _t7_;

    public ATerT5()
    {
        // Constructor
    }

    public ATerT5(
        @SuppressWarnings("hiding") TCrochetOuvrant _crochetOuvrant_,
        @SuppressWarnings("hiding") PT5 _t5_,
        @SuppressWarnings("hiding") TCrochetFermant _crochetFermant_,
        @SuppressWarnings("hiding") TPointIntero _pointIntero_,
        @SuppressWarnings("hiding") PT6 _t6_,
        @SuppressWarnings("hiding") TPoints _points_,
        @SuppressWarnings("hiding") PT7 _t7_)
    {
        // Constructor
        setCrochetOuvrant(_crochetOuvrant_);

        setT5(_t5_);

        setCrochetFermant(_crochetFermant_);

        setPointIntero(_pointIntero_);

        setT6(_t6_);

        setPoints(_points_);

        setT7(_t7_);

    }

    @Override
    public Object clone()
    {
        return new ATerT5(
            cloneNode(this._crochetOuvrant_),
            cloneNode(this._t5_),
            cloneNode(this._crochetFermant_),
            cloneNode(this._pointIntero_),
            cloneNode(this._t6_),
            cloneNode(this._points_),
            cloneNode(this._t7_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATerT5(this);
    }

    public TCrochetOuvrant getCrochetOuvrant()
    {
        return this._crochetOuvrant_;
    }

    public void setCrochetOuvrant(TCrochetOuvrant node)
    {
        if(this._crochetOuvrant_ != null)
        {
            this._crochetOuvrant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetOuvrant_ = node;
    }

    public PT5 getT5()
    {
        return this._t5_;
    }

    public void setT5(PT5 node)
    {
        if(this._t5_ != null)
        {
            this._t5_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t5_ = node;
    }

    public TCrochetFermant getCrochetFermant()
    {
        return this._crochetFermant_;
    }

    public void setCrochetFermant(TCrochetFermant node)
    {
        if(this._crochetFermant_ != null)
        {
            this._crochetFermant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetFermant_ = node;
    }

    public TPointIntero getPointIntero()
    {
        return this._pointIntero_;
    }

    public void setPointIntero(TPointIntero node)
    {
        if(this._pointIntero_ != null)
        {
            this._pointIntero_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointIntero_ = node;
    }

    public PT6 getT6()
    {
        return this._t6_;
    }

    public void setT6(PT6 node)
    {
        if(this._t6_ != null)
        {
            this._t6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t6_ = node;
    }

    public TPoints getPoints()
    {
        return this._points_;
    }

    public void setPoints(TPoints node)
    {
        if(this._points_ != null)
        {
            this._points_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._points_ = node;
    }

    public PT7 getT7()
    {
        return this._t7_;
    }

    public void setT7(PT7 node)
    {
        if(this._t7_ != null)
        {
            this._t7_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t7_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._crochetOuvrant_)
            + toString(this._t5_)
            + toString(this._crochetFermant_)
            + toString(this._pointIntero_)
            + toString(this._t6_)
            + toString(this._points_)
            + toString(this._t7_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._crochetOuvrant_ == child)
        {
            this._crochetOuvrant_ = null;
            return;
        }

        if(this._t5_ == child)
        {
            this._t5_ = null;
            return;
        }

        if(this._crochetFermant_ == child)
        {
            this._crochetFermant_ = null;
            return;
        }

        if(this._pointIntero_ == child)
        {
            this._pointIntero_ = null;
            return;
        }

        if(this._t6_ == child)
        {
            this._t6_ = null;
            return;
        }

        if(this._points_ == child)
        {
            this._points_ = null;
            return;
        }

        if(this._t7_ == child)
        {
            this._t7_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._crochetOuvrant_ == oldChild)
        {
            setCrochetOuvrant((TCrochetOuvrant) newChild);
            return;
        }

        if(this._t5_ == oldChild)
        {
            setT5((PT5) newChild);
            return;
        }

        if(this._crochetFermant_ == oldChild)
        {
            setCrochetFermant((TCrochetFermant) newChild);
            return;
        }

        if(this._pointIntero_ == oldChild)
        {
            setPointIntero((TPointIntero) newChild);
            return;
        }

        if(this._t6_ == oldChild)
        {
            setT6((PT6) newChild);
            return;
        }

        if(this._points_ == oldChild)
        {
            setPoints((TPoints) newChild);
            return;
        }

        if(this._t7_ == oldChild)
        {
            setT7((PT7) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

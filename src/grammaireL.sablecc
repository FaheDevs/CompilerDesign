Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];


Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
parenthese_ouvrante = '(';
parenthese_fermante = ')';
virgule = ',';
nombre = chiffre+;
identif = alpha alphanum*;
ou = '|';
et = '&';
egale = '=';
inf = '<';
plus  = '+';
minus = '-';
div = '/';
mult = '*';
non = '!';
si = 'si';
alors = 'alors';
sinon = 'sinon';
tantque= 'tantque';
faire = 'faire';
retour ='retour';
appel = 'appel';
open = '{';
close = '}';
lire = 'lire';
ecrire ='ecrire';
pointv = ';';

Ignored Tokens

espaces, commentaire;

Productions

exp = {ou} exp ou t1 | t1;
t1 = {et} t1 et t2 | t2;
t2 = {egale} t2 egale t3 |{inf} t2 inf t3 | t3 ;
t3 = {plus} t3 plus t4 |{minus} t3 minus t4 | t4;
t4 = {mult}t4 mult t5 |{div} t4 div t5 | t5 ;
t5 = {non} non t5 | {nombre} nombre | {identif} identif;

iaff = {iaff} identif egale  exp;

isi = {isi} si exp alors ib | {isinon} isi sinon ib ;

itq =  {itantque} tantque exp faire ib ;

iretour = {iretour} retour exp ;

iappel = {iappel} appel;

ilire = {ilire} identif egale lire;
iecrire = {iecrire} ecrire parenthese_ouvrante exp parenthese_fermante;

ib = {ib} open lins close;
lins = {lins} ins lins | {vide};
ins = {insexp} exp pointv | {insaff} iaff pointv | {inssi} isi pointv | {instq} itq pointv | {insretour} iretour pointv | {insappel} iappel pointv | {insecrire} iecrire pointv | {inslire} ilire pointv;





programme =
{prog1} parenthese_ouvrante identif virgule nombre parenthese_fermante |
{prog2} parenthese_ouvrante nombre parenthese_fermante ;



